require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ShopsController do
  let(:shop) { FactoryGirl.create(:shop) }
  let(:paid_shop) { FactoryGirl.create(:shop, paid: true) }

  # This should return the minimal set of attributes required to create a valid
  # Shop. As you add validations to Shop, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ShopsController. Be sure to keep this updated too.
  def valid_session
    {
      "shopify" => ShopifyAPI::Session.new('demo1.myshopify.com', '12345')
    }
  end

  describe "GET edit" do
    context "for logged in user" do
      it "assigns the requested shop as @shop" do
        get :edit, {:id => shop.to_param}, valid_session
        assigns(:shop).should eq(shop)
      end
    end

    context "for non paid user" do
      it 'redirects to billing controller' do
        get :edit, {:id => shop.to_param}, valid_session
        response.should redirect_to(billing_index_path)
      end
    end

    context "for non-logged in user" do
      it "redirects user to the root path to login" do
        get :edit, {:id => shop.to_param}
        response.should redirect_to(login_path)
      end
    end

    context "for another user" do
      it "redirects user to login path with access denied" do
        shop2 = FactoryGirl.create(:shop, url: 'another.myshopify.com')
        get :edit, {:id => shop2.to_param}, valid_session
        response.should redirect_to(login_path)
      end
    end
  end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested shop" do
  #       Shop.any_instance.should_receive(:update_attributes).with({ "url" => "MyString" })
  #       put :update, {:id => paid_shop.to_param, :shop => { "url" => "MyString" }}, valid_session
  #     end

  #     it "assigns the requested shop as @shop" do
  #       put :update, {:id => paid_shop.to_param, :shop => valid_attributes}, valid_session
  #       assigns(:shop).should eq(paid_shop)
  #     end

  #     it "redirects to the shop" do
  #       put :update, {:id => paid_shop.to_param, :shop => valid_attributes}, valid_session
  #       response.should redirect_to(paid_shop)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the shop as @shop" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Shop.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => paid_shop.to_param, :shop => { "url" => "invalid value" }}, valid_session
  #       assigns(:shop).should eq(paid_shop)
  #     end

  #     it "re-renders the 'edit' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Shop.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => paid_shop.to_param, :shop => { "url" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

end
